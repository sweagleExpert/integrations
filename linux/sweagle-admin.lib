#!/usr/bin/env bash
##########################################################
# SCRIPT: sweagle-admin.lib
# AUTHOR: dimitris@sweagle.com
# DATE:   January 2020
# REV:    1.0.D (Valid are A, B, D, T, Q, and P)
#               (For Alpha, Beta, Dev, Test, QA, and Production)
#
# PLATFORM: Not platform dependent
#
# REQUIREMENTS:	- jq is required for this shell script to work.
#               (see: https://stedolan.github.io/jq/)
#       - BASH v4 or more is required for this script to work
#       - If on MAC with older Bash, please install higher bash version, check https://stackoverflow.com/questions/10574969/how-do-i-install-bash-3-2-25-on-mac-os-x-10-5-8
#
# PURPOSE:		Libraries of administration SWEAGLE functions
#
# INPUTS:		SWEAGLE_URL and SWEAGLE_TOKEN variables should be defined before in source file or at envrt variables
#
# REV LIST:
#        DATE: DATE_of_REVISION
#        BY:   AUTHOR_of_MODIFICATION
#        MODIFICATION: Describe what was modified, new features, etc--
#
#
# set -n   # Uncomment to check script syntax, without execution.
#          # NOTE: Do not forget to put the # comment back in or
#          #       the shell script will never execute!
# set -x   # Uncomment to debug this shell script
##########################################################
#               FILES AND VARIABLES
##########################################################
OK=0
SYSTEM_ERROR=1
INSUFFICIENT_ARGS=2
SYNTAX_ERROR=3
NOT_FOUND=4
SWEAGLE_ERROR=5

##########################################################
#                    CHECK PREREQUISITES
##########################################################
if ! [ -x "$(command -v jq)" ] ; then
  echo "#########################################################################################"
  echo "########## ERROR: JQ is not installed"
  echo "#########################################################################################"
  exit 1
fi

BASH_VERSION=$( bash --version | sed -Ee 's/GNU bash, version ([0-9.]+).*/\1/;q' )
if [ "${BASH_VERSION:0:1}" -lt 4 ] ; then
  echo "#########################################################################################"
  echo "########## ERROR: BASH should be v4 or higher"
  echo "#########################################################################################"
  exit 1
fi

if [ -z "${SWEAGLE_URL}" ] || [ -z "${SWEAGLE_TOKEN}" ] ; then
  echo "#########################################################################################"
  echo "########## ERROR: SWEAGLE_URL and SWEAGLE_TOKEN must be defined"
  echo "#########################################################################################"
  exit 1
fi

##########################################################
#                    UTILITIES FUNCTIONS
#               (USED BY SWEAGLE API FUNCTIONS)
##########################################################

# manage errors from CURL to SWEAGLE
# inputs are curl returned code and response
function handleErrors() {
  rc=$1
  response=$2
  # check curl exit code
  if [ ${rc} -ne 0 ]; then echo "ERROR: CURL exit code ${rc}"; return ${rc}; fi;
  # check http_code returned
  http_code=$(echo "$response"| tail -c 4)
  response=$(echo "${response::-3}")
  if [[ "${http_code}" != 20* ]]; then echo "ERROR HTTP ${http_code}: SWEAGLE response ${response}"; return ${http_code}; fi;
  # check sweagle error
  errorFound=$(echo $response | jsonValue "error_description")
  if [[ -z $errorFound ]]; then
    echo "$response"
    return $OK
  else
    echo "### ERROR IN SWEAGLE: $errorFound"
    return $SWEAGLE_ERROR
  fi
}

# extract the value of a json key from json string (if present)
# inputs are key to search for, and number of the occurrence to extract (default 1 if none provided)
function jsonValue() {
   key=$1
   if [[ -z "$2" ]]; then
      num=1
   else
      num=$2
   fi
   awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/\042'$key'\042/){print $(i+1)}}}' | tr -d '"' | sed -n ${num}p
}

# encode a string for HTTP URL
# (used for upload to workaround issues with data-binary conflict with data-urlencode)
function urlencode() {
  # urlencode <string>
  old_lc_collate=$LC_COLLATE
  LC_COLLATE=C

  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
      local c="${1:i:1}"
      case $c in
          [a-zA-Z0-9.~_-]) printf "$c" ;;
          *) printf '%%%02X' "'$c" ;;
      esac
  done
  LC_COLLATE=$old_lc_collate
}

##########################################################
#                    SWEAGLE API FUNCTIONS COMMONS
##########################################################

# arg1: changeset ID
function approveModelChangeset() {
	changeset=${1}
	# Create and open a new changeset
	response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/changeset/${changeset}/approve" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json')
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  return $OK
}


# arg1: title
# arg2: description
function createModelChangeset() {
	title=${1}
	description=${2}

	# Create and open a new changeset
	response=$(\
		curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/changeset" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data-urlencode "title=${title}" \
		--data-urlencode "description=${description}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  cs=$(echo ${response} | jq '.properties.changeset.id')
	echo ${cs}
}


function setPreferences {
  if [ $# -lt 1 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE AT LEAST ONE ARG WITH FORMAT <preference_key1>=<value1> <preference_key2>=<value2> ..."
    return $INSUFFICIENT_ARGS
  fi
  args=""
  while [[ "$#" > "0" ]]
  do
    case $1 in
      (*=*) args="${args}&$1";;
    esac
    shift
  done
  echo "ARGS=${args}"

  response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer ${SWEAGLE_TOKEN}" "${SWEAGLE_URL}/api/tenant/preferences?${args}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  return $OK
}



##########################################################
#                    SWEAGLE API FUNCTIONS FOR CDI TYPES
##########################################################

# arg1: changeset ID
# arg2: name
# arg3: description
# arg4: value_type
# arg5: required
# arg6: sensitive
# arg7: regex
# arg8: listOfValues
function createCdiType() {
	changeset=${1}
	name=${2}
	description=${3:-}
	value_type=${4:-Text}
	required=${5:-false}
	sensitive=${6:-false}
	regex=${7:-}
	listOfValues=${8:-}

	# Create a new mdi_type
	response=$(\
		curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/mdiType" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "changeset=${changeset}" \
		--data-urlencode "name=${name}" \
		--data "required=${required}" \
		--data-urlencode "valueType=${value_type}" \
		--data "sensitive=${sensitive}" \
		--data-urlencode "regex=${regex}" \
		--data-urlencode "listOfValues=${listOfValues}" \
		--data-urlencode "description=${description}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	return $OK
}

function getAllMdiTypes() {
	# Get all mdi_types
	response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/mdiType" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json')
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	echo ${response}
}

# arg1: id
function getMdiTypeFromId() {
  id=${1}

	# Get one mdi_type based on its id
	response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/mdiType/$id" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json')
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	echo ${response}
}


# arg1: name
function getMdiTypeFromName() {
	name=${1}

	# Get a mdi_type based on its name
	#echo "curl ${SWEAGLE_URL}/api/v1/model/mdiType?name=$name --request GET --header 'authorization: bearer ${SWEAGLE_TOKEN}'  --header 'Accept: application/vnd.siren+json'"
	response=$(\
	  curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/mdiType?name=$name" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		)
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	id=$(echo ${response} | jq '.entities[].properties.id')
	echo ${id}
}


# arg1: changeset ID
# arg2: MDI type ID
# arg3: name
# arg4: description
# arg5: value_type
# arg6: required
# arg7: sensitive
# arg8: regex
# arg9: listOfValues
function updateMdiType() {
	changeset=${1}
	id=${2}
	name=${3}
	description=${4:-}
	value_type=${5:-Text}
	required=${6:-false}
	sensitive=${7:-false}
	regex=${8:-}
	listOfValues=${9:-}

	# Update an existing mdi_type
	response=$(\
		curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/mdiType/$id" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "changeset=${changeset}" \
		--data-urlencode "name=${name}" \
		--data "required=${required}" \
		--data-urlencode "valueType=${value_type}" \
		--data "sensitive=${sensitive}" \
		--data-urlencode "regex=${regex}" \
		--data-urlencode "listOfValues=${listOfValues}" \
		--data-urlencode "description=${description}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  return $OK
}


##########################################################
#                    SWEAGLE API FUNCTIONS FOR NODE TYPES
##########################################################

# arg1: changeset ID
# arg2: name
function createNodeType() {
	changeset=${1}
	name=${2}

	# Manage specific integer and date args to avoid conversion error if empty string
	args=""
	if [ -n "${endOfLife}" ]; then
		args="?endOfLife=$endOfLife"
	fi
	if [ -n "${numberOfChildNodes}" ]; then
		if [ -z "$args" ]; then
			args="?numberOfChildNodes=$numberOfChildNodes"
		else
			args="$args&numberOfChildNodes=$numberOfChildNodes"
		fi
	fi
	if [ -n "${numberOfIncludes}" ]; then
		if [ -z "$args" ]; then
			args="?numberOfIncludes=$numberOfIncludes"
		else
			args="$args&numberOfIncludes=$numberOfIncludes"
		fi
	fi
	createURL="${SWEAGLE_URL}/api/v1/model/type$args"

	# Create a new node_type
	response=$(\
		curl -skw "%{http_code}" "$createURL" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "changeset=${changeset}" \
		--data-urlencode "name=${name}" \
		--data-urlencode "description=${description}" \
		--data "inheritFromParent=${inheritFromParent}" \
		--data "internal=${internal}" \
		--data "isMetadataset=${isMetadataset}" )

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	# Get the node ID created
	id=$(echo ${response} | jq '.properties.id')
	echo ${id}
}


# arg1: changeset ID
# arg2: type ID
# arg3: name
# arg4: description
# arg5: valueType
# arg6: required
# arg7: sensitive
# arg8: regex
# arg9: dateFormat
# arg10: defaultValue
# arg11: referenceTypeName
function createTypeAttribute() {
	changeset=${1}
	type_id=${2}
	name=${3}
	description=${4:-}
	valueType=${5:-Text}
	required=${6:-false}
	sensitive=${7:-false}
	regex=${8:-}
	listOfValues=${9:-}
	dateFormat=${10:-}
	defaultValue=${11:-}
	referenceTypeName=${12:-}

  # Calculate URL depending on referenceType, because both referenceType or valueType must not be present at same time
	if [[ -n "${referenceTypeName}" && "${referenceTypeName}" != "null" ]]; then
		# if there is a reference name, then find referenced type
		referenceTypeId=$(getNodeType "$referenceTypeName")
		createURL="${SWEAGLE_URL}/api/v1/model/attribute?referenceType=${referenceTypeId}"
	else
		createURL="${SWEAGLE_URL}/api/v1/model/attribute?valueType=${valueType}"
	fi

	# Create a new type_attribute
	response=$(\
		curl -skw "%{http_code}" "$createURL" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "changeset=${changeset}" \
		--data "type=${type_id}" \
		--data-urlencode "name=${name}" \
		--data-urlencode "description=${description}" \
		--data "required=${required}" \
		--data "sensitive=${sensitive}" \
		--data-urlencode "regex=${regex}" \
		--data-urlencode "listOfValues=${listOfValues}" \
		--data-urlencode "dateFormat=${dateFormat}" \
		--data-urlencode "defaultValue=${defaultValue}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  return $OK
}


# arg1: changeset ID
# arg2: type ID
# arg3: name
function deleteTypeAttribute() {
	changeset=${1}
	type_id=${2}
	name=${3}

	# get attribute ID from name
	attr_id=$(getTypeAttribute $type_id "${name}")

	# delete attribute
	deleteURL="${SWEAGLE_URL}/api/v1/model/attribute/${attr_id}?changeset=${changeset}&type=${type_id}"
	response=$(curl -skw "%{http_code}" "$deleteURL" --request DELETE --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json')
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
}


# arg1: type id
function getAllAllowedChildTypes() {
	id=${1}

	response=$(\
	  curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/type/$id/childTypes" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		)
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	echo ${response}
}


# arg1: type id
function getAllAttributes() {
	id=${1}

	# Get a type attributes based on type id
	response=$(\
	  curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/attribute?type=$id" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		)
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	echo ${response}
}


function getAllNodeTypes() {

	response=$(\
	  curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/type" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		)
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	echo ${response}
}


# Get a node_type based on its name
# arg1: name
function getNodeType() {
	name=${1}

  # Replace any space in name by %20 as data-urlencode doesn't seem to work for GET
  name=${name//" "/"%20"}
	response=$(\
	  curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/type?name=${name}" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' )
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	id=$(echo ${response} | jq '.entities[0].properties.id')
	echo ${id}
}

# arg1: type id
# arg2: name
function getTypeAttribute() {
	id=${1}
	name=${2:-}

	# Get a type attributes based on type id
	response=$(\
	  curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/model/attribute?type=$id" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		)
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	if [ -n "${name}" ]; then
		# Get attribute ID based on its name
		attr_id=$(echo ${response} | jq --arg attr_name ${name} '.entities[].properties | select(.identifierKey|index($attr_name)) | .id')
	else
		# Return list of existing attributes names
		attr_id=$(echo ${response} | jq '.entities[].properties.identifierKey')
	fi
	echo ${attr_id}
}


# arg1: changeset ID
# arg2: type ID
# arg3: attribute ID
# arg4: name
# arg5: description
# arg6: valueType
# arg7: required
# arg8: sensitive
# arg9: regex
# arg10: dateFormat
# arg11: defaultValue
# arg12: referenceTypeName
function updateTypeAttribute() {
	changeset=${1}
	type_id=${2}
	attr_id=${3}
	name=${4}
	description=${5:-}
	valueType=${6:-Text}
	required=${7:-false}
	sensitive=${8:-false}
	regex=${9:-}
	listOfValues=${10:-}
	dateFormat=${11:-}
	defaultValue=${12:-}
	referenceTypeName=${13:-}

  # Calculate URL depending on referenceType, because both referenceType or valueType must not be present at same time
	if [ -n "${referenceTypeName}" ]; then
		# if there is a refence name, then find referenced type
		referenceTypeId=$(getNodeType "$referenceTypeName")
		updateURL="${SWEAGLE_URL}/api/v1/model/attribute/$attr_id?referenceType=${referenceTypeId}"
	else
		updateURL="${SWEAGLE_URL}/api/v1/model/attribute/$attr_id?valueType=${valueType}"
	fi

	# update a type_attribute
	response=$(\
		curl -skw "%{http_code}" "$updateURL" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "changeset=${changeset}" \
		--data "type=${type_id}" \
		--data-urlencode "name=${name}" \
		--data-urlencode "description=${description}" \
		--data "required=${required}" \
		--data "sensitive=${sensitive}" \
		--data-urlencode "regex=${regex}" \
		--data-urlencode "listOfValues=${listOfValues}" \
		--data-urlencode "dateFormat=${dateFormat}" \
		--data-urlencode "defaultValue=${defaultValue}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
}


##########################################################
#                    SWEAGLE API FUNCTIONS FOR PARSERS AND TEMPLATES
##########################################################


function assignParserToCds {
  if [ $# -lt 2 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE parserId=<parser ID>, cdsId=<ConfigDataSet ID>"
    return $INSUFFICIENT_ARGS
  fi
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done

  response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/tenant/metadata-parser/${parserId}/metadatasets?metadataset=${cdsId}" \
    -X POST  -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}" | jq .; return ${rc}
}


function assignParserToCdsByName {
  if [ $# -lt 2 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE parserName=<parser name>, cdsName=<ConfigDataSet name>"
    return $INSUFFICIENT_ARGS
  fi
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done

  cdsId=$(getConfigDataSetIdFromName "cdsName=${cdsName}")
  parserId=$(getParserIdFromName "parserName=${parserName}")
  response=$(assignParserToCds parserId=${parserId} cdsId=${cdsId})
  rc=$?; echo "${response}" | jq .; return ${rc}
}


function createParser {
  local argName=$1
  local argDescription=$2
  local argScript=$3
  echo "### Create parser with name: $argName"
  if [ "$argParserType" = "TEMPLATE" ]; then
    #for debug
    #echo "curl -sk -X POST '${SWEAGLE_URL}/api/v1/tenant/template-parser?name=$filename&parserType=$argParserType&errorDescriptionDraft=error+in+parser+$filename' --data-urlencode 'description=$argDescription' --data-urlencode 'template=$argScript' -H 'Authorization: bearer ${SWEAGLE_TOKEN}' -H 'Accept: application/vnd.siren+json'"
    response=$(curl -sk -X POST "${SWEAGLE_URL}/api/v1/tenant/template-parser?name=$filename" --data-urlencode "description=$argDescription" --data-urlencode "template=$argScript" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  else
    response=$(curl -sk -X POST "${SWEAGLE_URL}/api/v1/tenant/metadata-parser?name=$filename&parserType=$argParserType&errorDescriptionDraft=error+in+parser+$filename" --data-urlencode "description=$argDescription" --data-urlencode "scriptDraft=$argScript" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  fi
  # Check if any error before continue
  errorFound=$(echo $response | jsonValue "error_description")
  if [[ -z $errorFound ]]; then
    parserId=$(echo "$response" | jsonValue "id")
    echo "### Created parser with id: $parserId"
  else
    echo -e "\n###########"
    echo "### Error creating parser: $errorFound"
  fi
}


function deleteParser {
  local argId=$1
  if [ "$argParserType" = "TEMPLATE" ]; then
    response=$(curl -sk -X DELETE "${SWEAGLE_URL}/api/v1/tenant/template-parser/$argId" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  else
    response=$(curl -sk -X DELETE "${SWEAGLE_URL}/api/v1/tenant/metadata-parser/$argId" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  fi
  # Check if any error before continue
  errorFound=$(echo $response | jsonValue "error_description")
  if [[ -z $errorFound ]]; then
    echo "### Parser $argId deleted"
  else
    echo -e "\n###########"
    echo "### Error deleting parser: $errorFound"
    exit 1
  fi
}


function getNextParserId {
  echo "### Get parser list"
  if [ "$argParserType" = "TEMPLATE" ]; then
    response=$(curl -sk -X GET -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json" "${SWEAGLE_URL}/api/v1/tenant/template-parser")
  else
    response=$(curl -sk -X GET -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json" "${SWEAGLE_URL}/api/v1/tenant/metadata-parser")
  fi
  # Check if any error before continue
  errorFound=$(echo $response | jsonValue "error_description")
  if [[ -z $errorFound ]]; then
    # Extract next Parser Id from list
    parserId=$(echo $response | jsonValue "id")
    echo "Next parser Id is $parserId"
  else
    echo -e "\n###########"
    echo "### Error getting parser list: $errorFound"
    exit 1
  fi
}


function getParserIdFromName {
  if [ $# -lt 1 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE parserName=<parser name>, (OPTIONAL)parserType=EXPORTER or VALIDATOR, status=PUBLISHED OR ALL"
    return $INSUFFICIENT_ARGS
  fi
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  parserName=${parserName:-}
  parserType=${parserType:-}
  status=${status:-}
  response=$(getParsers "parserType=${parserType}" "status=${status}")
  #id=$(echo ${response} | jq --arg parser_name ${parserName} '.entities[].properties | select(.name|index($parser_name)) | .id')
  id=$(echo ${response} | jq --arg parser_name ${parserName} '.entities[].properties | select(.name == $parser_name) | .id')
  echo ${id}
}


function getParsers {
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  parserType=${parserType:-}
  status=${status:-}

  if [ "$ParserType" = "TEMPLATE" ]; then
	response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/tenant/template-parser?status=${status}" \
    -X GET  -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  else
	response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/tenant/metadata-parser?parserType=${parserType}&status=${status}" \
    -X GET  -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  fi
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}" | jq .; return ${rc}
}

function getParser {
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  parserType=${parserType:-}
  status=${status:-}
  parserId=${parserId:-}

  if [ "$ParserType" = "TEMPLATE" ]; then
	response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/tenant/template-parser/$parserId?status=${status}" \
    -X GET  -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  else
	response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/tenant/metadata-parser/$parserId?parserType=${parserType}&status=${status}" \
    -X GET  -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  fi
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}" | jq .; return ${rc}
}


function getTemplates {
  response=$(curl  -skw "%{http_code}" -X GET "${SWEAGLE_URL}/api/v1/tenant/template-parser" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}"; return ${rc}
}


function publishParser {
  local argId=$1
  local argScript=$2
  echo "### Publish parser with id: $argId"
  if [ "$argParserType" = "TEMPLATE" ]; then
    response=$(curl -sk -X POST "${SWEAGLE_URL}/api/v1/tenant/template-parser/$argId/publish" --data-urlencode "template=$argScript" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json" )
  else
    response=$(curl -sk -X POST "${SWEAGLE_URL}/api/v1/tenant/metadata-parser/$argId/publish" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json" )
  fi
  errorFound=$(echo $response | jsonValue "error_description")
  if [[ -z $errorFound ]]; then
    echo "### Published parser $argId"
  else
    echo -e "\n###########"
    echo "### Error publishing parser: $errorFound"
  fi
}


function updateParser {
  local argId=$1
  local argDescription=$2
  local argScript=$3
  echo "### Update parser $argId"
  if [ "$argParserType" = "TEMPLATE" ]; then
    response=$(curl -sk -X POST "${SWEAGLE_URL}/api/v1/tenant/template-parser/$argId/draft" --data-urlencode "description=$argDescription" --data-urlencode "template=$argScript" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  else
    response=$(curl -sk -X POST "${SWEAGLE_URL}/api/v1/tenant/metadata-parser/$argId" --data-urlencode "description=$argDescription" --data-urlencode "scriptDraft=$argScript" -H "Authorization: bearer ${SWEAGLE_TOKEN}" -H "Accept: application/vnd.siren+json")
  fi
  # Check if any error before continue
  errorFound=$(echo $response | jsonValue "error_description")
  if [[ -z $errorFound ]]; then
    echo "### Updated parser with id: $argId"
  else
    echo -e "\n**********"
    echo "### Error updating parser: $errorFound"
  fi
}


##########################################################
#                    SWEAGLE API FUNCTIONS FOR USER AND ROLES
##########################################################
# arg1: user_id
# arg2: apis_id (apis id separated by commas)
function addUserApis() {
	user_id=${1}
	apis_id=${2}

	# Add apis token to an existing user
	response=$(\
		curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/user/${user_id}/api" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "apiUsers=${apis_id}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
}

# arg1: user_id
# arg2: roles_id (roles id separated by commas)
function addUserRoles() {
	user_id=${1}
	roles_id=${2}

	# Add roles to an existing user
	response=$(\
		curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/user/${user_id}/assignRoles" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "roles=${roles_id}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
}


# arg1: user_id
# arg2: roles_id (roles id separated by commas)
function assignPolicyToRole() {
	role_id=${1}
	policies_id=${2}

	# Add roles to an existing user
  response=$(curl -skw "%{http_code}" -X POST "${SWEAGLE_URL}/api/v1/tenant/role/${role_id}/policies?policies=${policies_id}" -H "Authorization: bearer $SWEAGLE_TOKEN" -H "Accept: application/vnd.siren+json")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  return $OK
}


function createPolicy() {
  if [ "$#" -lt "2" ]; then
      echo "########## ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
      echo "########## YOU MUST PROVIDE <name> <description> type=<value>"
      echo "########## YOU MAY ALSO PROVIDE path=<NodePath Id> tag=<Tag Id> canEdit=<true|false> (default false)"
      exit $INSUFFICIENT_ARGS
  fi
  name=${1}
  description=${2}
  # Skip first 2 args
  shift; shift
  while [[ "$#" > "0" ]]
  do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check required args
  if [ -z "${type}" ]; then
    echo "########## ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "########## YOU MUST PROVIDE <name> <description> type=<value>"
    echo "########## YOU MAY ALSO PROVIDE path=<NodePath Id> tag=<Tag Id> canEdit=<true|false> (default false)"
    exit $INSUFFICIENT_ARGS
  fi
  # Put default value
  canEdit=${canEdit:-false}

  response=$(curl -skw "%{http_code}" -X POST "${SWEAGLE_URL}/api/v1/tenant/policy" -H "Authorization: bearer $SWEAGLE_TOKEN" -H "Accept: application/vnd.siren+json" \
    --data "canEdit=${canEdit}" \
    --data "type=${type}" \
    --data "path=${path}" \
    --data "tag=${tag}" \
    --data-urlencode "name=${name}" \
    --data-urlencode "description=${description}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  policyId=$(echo "$response" | jsonValue "id")
  echo $policyId
  return $OK
}


function createRole() {
  if [ "$#" -lt "2" ]; then
      echo "########## ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
      echo "########## YOU MUST PROVIDE <name> <description>"
      exit $INSUFFICIENT_ARGS
  fi
  name=${1}
  description=${2}

  response=$(curl -skw "%{http_code}" -X POST "${SWEAGLE_URL}/api/v1/tenant/role" -H "Authorization: bearer $SWEAGLE_TOKEN" -H "Accept: application/vnd.siren+json" \
    --data-urlencode "name=${name}" \
    --data-urlencode "description=${description}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  roleId=$(echo "$response" | jsonValue "id")
  echo $roleId
  return $OK
}


# arg1: username
# arg2: email
# arg3: name
# arg4: password
# arg5: disabled (true, false)
# arg6: userType (PERSON, API, SYSTEM)
# arg7: roles (comma separated list of roles Ids)
function createUser() {
	username=${1}
	email=${2}
	name=${3}
	password=${4:-"testtest"}
	disabled=${5:-false}
	userType=${6:-"PERSON"}
	roles=${7:-}

	response=$(\
		curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/user" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "username=${username}" \
		--data-urlencode "email=${email}" \
		--data-urlencode "name=${name}" \
		--data-urlencode "password=${password}" \
		--data "disabled=${disabled}" \
		--data "userType=${userType}" \
		--data-urlencode "roles=${roles}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  # return id of created user
  echo "$response" | jsonValue "id"
}


# arg1: policyname
function getPolicy() {
  policyname=${1}
  # Get all tenant policies
  response=$(curl -skw "%{http_code}" -X GET "${SWEAGLE_URL}/api/v1/tenant/policy" -H "Authorization: bearer $SWEAGLE_TOKEN" -H "Content-Type: application/vnd.siren+json;charset=UTF-8")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  id=$(echo "${response}" | jq --arg attr_name "$policyname" '._entities[] | select(.name|index($attr_name)) | .id')
  if [ "$id" = "" ]; then
    echo "ERROR: NOT FOUND"
    return $NOT_FOUND
  fi
  echo ${id}
  return $OK
}


# arg1: rolename
function getRole() {
  rolename=${1}
  # Get all tenant roles
  response=$(curl -skw "%{http_code}" -X GET "${SWEAGLE_URL}/api/v1/tenant/role" -H "Authorization: bearer $SWEAGLE_TOKEN" -H "Content-Type: application/vnd.siren+json;charset=UTF-8")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  id=$(echo ${response} | jq --arg attr_name "$rolename" '._entities[] | select(.name|index($attr_name)) | .id')
  if [ "$id" = "" ]; then
    echo "ERROR: NOT FOUND"
    return $NOT_FOUND
  fi
  echo ${id}
  return $OK
}


function getUsers() {
	# Get all tenant users
	response=$(curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/user" --request GET --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json')
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
	echo ${response}
}


# arg1: username
function getUserFromUsername() {
  username=${1}

  users_list=$(getUsers)
  if [ -x "$(command -v jq)" ] ; then
    id=$(echo ${users_list} | jq --arg attr_username ${username} '.entities[].properties | select(.username|index($attr_username)) | .id')
  else
    id=$(echo ${users_list} | grep ${username})
  fi
  if [ "$id" = "" ]; then
    echo "ERROR: NOT FOUND"
    return $NOT_FOUND
  fi
  echo ${id}
  return $OK
}

# arg1: email
# Global variable users_list is also used
function getUserFromEmail() {
  email=${1}

  users_list=$(getUsers)
  if [ -x "$(command -v jq)" ] ; then
    id=$(echo ${users_list} | jq --arg attr_email ${email} '.entities[].properties | select(.email|index($attr_email)) | .id')
  else
    id=$(echo ${users_list} | grep ${email})
  fi
  if [ "$id" = "" ]; then
    echo "ERROR: NOT FOUND"
    return $NOT_FOUND
  fi
  echo ${id}
  return $OK
}


# arg1: id (user id)
# arg2: username
# arg3: email
# arg4: name
# arg5: currentPassword
# arg6: newPassword
# arg7: disabled (true, false)
function updateUser() {
	id=${1}
	username=${2-}
	email=${3}
	name=${4}
	currentPassword=${5:-"testtest"}
	newPassword=${6:-}
	disabled=${7:-false}

	# Update an existing user
	response=$(\
		curl -skw "%{http_code}" "${SWEAGLE_URL}/api/v1/user/${id}" --request POST --header "authorization: bearer ${SWEAGLE_TOKEN}"  --header 'Accept: application/vnd.siren+json' \
		--data "username=${username}" \
		--data-urlencode "email=${email}" \
		--data-urlencode "name=${name}" \
		--data-urlencode "currentPassword=${currentPassword}" \
		--data-urlencode "password=${newPassword}" \
		--data-urlencode "rwPassword=${newPassword}" \
		--data "disabled=${disabled}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
}
