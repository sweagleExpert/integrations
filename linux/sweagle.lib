#!/usr/bin/env bash
##########################################################
# SCRIPT: sweagle.lib
# AUTHOR: dimitris@sweagle.com
# DATE:   December 2019
# REV:    1.0.D (Valid are A, B, D, T, Q, and P)
#               (For Alpha, Beta, Dev, Test, QA, and Production)
#				- tested in bash 4.4 and 5.0 on Mac OS X
#
# PLATFORM: Not platform dependent
#
# REQUIREMENTS:	- jq is required for this shell script to work.
#               (see: https://stedolan.github.io/jq/)
#       - BASH v4 or more is required for this script to work
#       - If on MAC with older Bash, please install higher bash version, check https://stackoverflow.com/questions/10574969/how-do-i-install-bash-3-2-25-on-mac-os-x-10-5-8
#
# PURPOSE:		Libraries of common SWEAGLE functions
#
# REV LIST:
#        DATE: DATE_of_REVISION
#        BY:   AUTHOR_of_MODIFICATION
#        MODIFICATION: Describe what was modified, new features, etc--
#
#
# set -n   # Uncomment to check script syntax, without execution.
#          # NOTE: Do not forget to put the # comment back in or
#          #       the shell script will never execute!
#  set -x   # Uncomment to debug this shell script
##########################################################
#               FILES AND VARIABLES
##########################################################
OK=0
SYSTEM_ERROR=1
INSUFFICIENT_ARGS=2
SYNTAX_ERROR=3
FILE_NOT_FOUND=4
SWEAGLE_ERROR=5

##########################################################
#                    CHECK PREREQUISITES
##########################################################
if ! [ -x "$(command -v jq)" ] ; then
  echo "#########################################################################################"
  echo "########## ERROR: JQ is not installed"
  echo "#########################################################################################"
  exit 1
fi

BASH_VERSION=$( bash --version | sed -Ee 's/GNU bash, version ([0-9.]+).*/\1/;q' )
if [ "${BASH_VERSION:0:1}" -lt 4 ] ; then
  echo "#########################################################################################"
  echo "########## ERROR: BASH should be v4 or higher"
  echo "#########################################################################################"
  exit 1
fi

##########################################################
#                    UTILITIES FUNCTIONS
#               (USED BY SWEAGLE API FUNCTIONS)
##########################################################

# manage errors from CURL to SWEAGLE
# inputs are curl returned code and response
function handleErrors() {
  rc=$1
  response=$2
  # check curl exit code
  if [ ${rc} -ne 0 ]; then echo "ERROR: CURL exit code ${rc}"; return ${rc}; fi;
  # check http_code returned
  http_code=$(echo "$response"| tail -c 4)
  response=$(echo "${response::-3}")
  if [[ "${http_code}" != 20* ]]; then echo "ERROR HTTP ${http_code}: SWEAGLE response ${response}"; return ${http_code}; fi;
  # check sweagle error
  errorFound=$(echo $response | jsonValue "error_description")
  if [[ -z $errorFound ]]; then
    echo "$response"
    return $OK
  else
    echo "### ERROR IN SWEAGLE: $errorFound"
    return $SWEAGLE_ERROR
  fi
}

# extract the value of a json key from json string (if present)
# inputs are key to search for, and number of the occurrence to extract (default 1 if none provided)
function jsonValue() {
   key=$1
   if [[ -z "$2" ]]; then
      num=1
   else
      num=$2
   fi
   awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/\042'$key'\042/){print $(i+1)}}}' | tr -d '"' | sed -n ${num}p
}

# encode a string for HTTP URL
# (used for upload to workaround issues with data-binary conflict with data-urlencode)
function urlencode() {
  # urlencode <string>
  old_lc_collate=$LC_COLLATE
  LC_COLLATE=C

  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
      local c="${1:i:1}"
      case $c in
          [a-zA-Z0-9.~_-]) printf "$c" ;;
          *) printf '%%%02X' "'$c" ;;
      esac
  done
  LC_COLLATE=$old_lc_collate
}

##########################################################
#                    SWEAGLE API FUNCTIONS
##########################################################
function approveChangeset() {
  if [ $# -ne 1 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo -e "\n########## YOU SHOULD PROVIDE 1-CHANGESET ID TO APPROVE"
    return $INSUFFICIENT_ARGS
  fi

  # echo "Approving changeset $csId"
  response=$(curl -skw "%{http_code}" -X POST "${sweagleURL}/api/v1/data/changeset/$1/approve" -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json")
  # Handle errors
  response=$(handleErrors $? "${response}")
  # No specific response processing, just return it
  rc=$?; echo "${response}"; return ${rc}
}


function createChangeset() {
  if [ $# -lt 1 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-TITLE, (OPTIONAL) 2-DESCRIPTION"
    return $INSUFFICIENT_ARGS
  fi

  title=${1}
	description=${2:-}

  #echo "Creating changeset"
  response=$(curl -skw "%{http_code}" -X POST "${sweagleURL}/api/v1/data/changeset" -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json" \
    --data-urlencode "title=${title}" \
    --data-urlencode "description=${description}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  csId=$(echo $response | jsonValue "id")
  echo ${csId}
  return $OK
}


function createCds() {
  if [ $# -lt 3 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-CHANGESET ID, 2-NAME OF CDS, 3-NODE PATH (nodes separated by commas)"
    return $INSUFFICIENT_ARGS
  fi
  csId=$1
  cdsName=$2
  cdsPath=$3

  response=$(curl -skw "%{http_code}" -X POST "${sweagleURL}/api/v1/data/include/byPath?changeset=$csId&name=$cdsName&referenceNode=$cdsPath" -H "Authorization: bearer $aToken" -H "Content-Type: application/vnd.siren+json;charset=UTF-8")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  echo "Created configdataset: $cdsName"
  return $OK
}


function createConfigData() {
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  attributeKey=${attributeKey:-}
  attributeValue=${attributeValue:-}
  changeset=${changeset:-}
  isSensitive=${isSensitive:-false}
  mdiTypeId=${mdiTypeId:-}
  mdiTypeName=${mdiTypeName:-}
  node=${node:-}
  path=${path:-}

  # Check if insufficient args
  if [[ -z "${attributeKey}" ]] || [[ -z "${attributeValue}" ]]; then echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"; echo "### YOU MUST PROVIDE attributeKey=<key> and attributeValue=<value>"; return $INSUFFICIENT_ARGS; fi
  if [[ -z "${node}" ]] && [[ -z "${path}" ]]; then echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"; echo "### YOU MUST PROVIDE path or node where to store key"; return $INSUFFICIENT_ARGS; fi

  # Check if changeset not provided, then create it
  if [[ -z ${changeset} ]]; then changeset=$(createChangeset "Create key ${attributeKey}"); fi

  # Check if mdiTypeName provided and id empty, will search for Id

  #echo "Creating changeset"
  response=$(curl -skw "%{http_code}" -X POST "${sweagleURL}/api/v1/data/metadata" -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json" \
    --data-urlencode "attributeKey=${attributeKey}" \
    --data-urlencode "attributeValue=${attributeValue}" \
    --data "changeset=${changeset}&isSensitive=${isSensitive}&mdiTypeId=${mdiTypeId}&node=${node}&path=${path}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}"; return ${rc}
}


function createInclude {
  if [ $# -lt 2 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE parentNode=<value> referenceNode=<value> (node path, comma separated)"
    echo "### (OPTIONAL) YOU MAY ALSO PROVIDE changeset=<value>"
    return $INSUFFICIENT_ARGS
  fi

  while [[ "$#" > "0" ]]
  do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  changeset=${changeset:-}
  parentNode=${parentNode:-}
  referenceNode=${referenceNode:-}

  if [ -z "${changeset}" ]; then changeset=$(createChangeset "Include ${referenceNode} in ${parentNode}"); fi

  response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer $aToken" "$sweagleURL/api/v1/data/include/byPath?changeset=${changeset}&parentNode=${parentNode}&referenceNode=${referenceNode}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}"; return ${rc}
  echo ${changeset}
  return $OK
}


function createMultipleIncludes {
  if [ $# -lt 2 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE parentNodes=<value> referenceNodes=<value> (where <value> is an array of node path, comma separated, and same dimension)"
    echo "### <value> example array with 2 items: (node1,node2 node1,node3)"
    echo "### (OPTIONAL) YOU MAY ALSO PROVIDE changeset=<value>"
    return $INSUFFICIENT_ARGS
  fi

  while [[ "$#" > "0" ]]
  do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  changeset=${changeset:-}
  parentNodes=${parentNodes:-}
  referenceNodes=${referenceNodes:-}

  # Build JSON body with array of all includes/parent
  jsonBody="["
  for ((i=0;i<${#parentNodes[@]};++i)); do
    jsonBody="${jsonBody}{\"referenceNode\":\"${referenceNodes[i]}\",\"parentNode\":\"${parentNodes[i]}\"},"
  done
  # remove last character
  jsonBody=${jsonBody::-1}
  jsonBody="${jsonBody}]"

  if [ -z "${changeset}" ]; then changeset=$(createChangeset "Create multiple includes"); fi

  response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer $aToken" -H "Content-Type: application/json" \
    "$sweagleURL/api/v1/data/include/byMultiplePath?changeset=${changeset}" \
    --data "${jsonBody}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}"; return ${rc}
  echo ${changeset}
  return $OK
}


function createNode {
  if [ $# -ne 3 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-NEW NODE NAME, 2-PARENT NODE ID, 3-CHANGESET ID"
    return $INSUFFICIENT_ARGS
  fi

  response=$(curl -skw "%{http_code}" -X POST "${sweagleURL}/api/v1/data/node?name=$1&parentNode=$2&changeset=$3" -H "Authorization: bearer $aToken")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  newNodeId=$(echo "$response" | jq --raw-output .master.id )
  echo $newNodeId
  return $OK
}


function createNodefromType {
  if [ $# -ne 4 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-NEW NODE NAME, 2-TYPE NAME, 3-PARENT NODE ID, 4-CHANGESET ID"
    return $INSUFFICIENT_ARGS
  fi

  response=$(curl -skw "%{http_code}" -X POST "${sweagleURL}/api/v1/data/node?name=$1&typeName=$2&parentNode=$3&changeset=$4" -H "Authorization: bearer $aToken")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  newNodeId=$(echo "$response" | jq --raw-output .master.id )
  echo $newNodeId
  return $OK
}


function deleteChangeset() {
  if [ $# -ne 1 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-CHANGESET ID TO DELETE"
    return $INSUFFICIENT_ARGS
  fi

  response=$(curl -skw "%{http_code}" -X DELETE "${sweagleURL}/api/v1/data/changeset/$1" -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  echo "### Changeset $1 deleted"
  return $OK
}


function deleteConfigData() {
  if [ $# -ne 1 ]; then echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"; echo "### YOU SHOULD PROVIDE 1-CONFIG DATA ID TO DELETE"; return $INSUFFICIENT_ARGS; fi

  response=$(curl -skw "%{http_code}" -X DELETE "${sweagleURL}/api/v1/data/metadata/$1" -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  echo "### metadata $1 deleted"
  return $OK
}


function getConfig {
  if [[ $# -lt 2 ]]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-MDS, 2-PARSER"
    echo "### (OPTIONAL) YOU MAY PROVIDE ANY OTHER API OPTIONS IN THE FORMAT <option>=<value> (ex: template=true)"
    return $INSUFFICIENT_ARGS
  fi

  argMds=$1
  argParser=$2
  while [[ "$#" > "0" ]]
  do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  template=${template:-false}

  if [ "$template" != "true" ]; then
    response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/tenant/metadata-parser/parse?mds=${argMds}&parser=${argParser}&tag=${tag}&args=${args}&format=${format}&mdsArgs=${mdsArgs}&mdsTags=${mdsTags}")
  else
    response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/tenant/template-parser/replace?mds=${argMds}&parser=${argParser}&tag=${tag}")
  fi
  # Handle errors
  response=$(handleErrors $? "${response}")
  # No specific response processing, just return it
  rc=$?; echo "${response}"; return ${rc}
}


function getConfigData() {
  nbArgs=$#
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  attributeKey=${attributeKey:-}
  changeset=${changeset:-}
  path=${path:-}

  # Check if insufficient args
  if [ ${nbArgs} -lt 1 ] || [ -z "${path}" ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE path=<node path>, and optionnaly attributeKey=<keyName>"
    return $INSUFFICIENT_ARGS
  fi

  response=$(curl -skw "%{http_code}" -X GET "${sweagleURL}/api/v1/data/metadata" -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json" \
    --data-urlencode "attributeKey=${attributeKey}" \
    --data "changeset=${changeset}&path=${path}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}"; return ${rc};
}


function getConfigDataId() {
  nbArgs=$#
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  attributeKey=${attributeKey:-}
  changeset=${changeset:-}
  path=${path:-}

  # Check if insufficient args
  if [ ${nbArgs} -lt 2 ] || [ -z "${path}" ] || [ -z "${attributeKey}" ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE path=<node path> and attributeKey=<key name>"
    return $INSUFFICIENT_ARGS
  fi

  response=$(curl -skw "%{http_code}" -X GET "${sweagleURL}/api/v1/data/metadata" -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json" \
    --data-urlencode "attributeKey=${attributeKey}" \
    --data "changeset=${changeset}&path=${path}")

  #echo ${response} | jq ‘._entities[]|select(.identifierKey == "$cdiKeyName").id'

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}"; return ${rc};
}


function getConfigDataSetIdFromName {
  if [ $# -lt 1 ]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE cdsName=<configdataset name>, (OPTIONAL)forIncoming=true or false"
    return $INSUFFICIENT_ARGS
  fi
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  cdsName=${cdsName:-}
  forIncoming=${forIncoming:-}
  response=$(getConfigDataSets "forIncoming=${forIncoming}")
  id=$(echo ${response} | jq --arg cds_name ${cdsName} '.entities[].properties | select(.identifierKey == $cds_name) | .id')
  echo ${id}
}


function getConfigDataSets {
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  forIncoming=${forIncoming:-false}

  response=$(curl -skw "%{http_code}" "$sweagleURL/api/v1/data/include?forIncoming=${forIncoming}" \
    -X GET  -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}" | jq .; return ${rc}
}


function getNodeId {
  if [[ $# -ne 1 ]]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-NODE PATH (COMMA SEPARATED)"
    return $INSUFFICIENT_ARGS
  fi

  response=$(curl -skw "%{http_code}" -X GET -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/data/node?path=${1}" )
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, handle response
  nodeId=$(echo "$response" | jq --raw-output '._entities[].id')
  echo $nodeId
  return $OK
}


function getValidationStatus {
  if [[ $# -lt 1 ]]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE name=<MDS NAME>"
    return $INSUFFICIENT_ARGS
  fi
  while [[ "$#" > "0" ]]
  do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  name=${name:-}
  forIncoming=${forIncoming:-true}
  format=${format:-json}
  withCustomValidations=${withCustomValidations:-true}

  response=$(curl -skw "%{http_code}" -X GET -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/data/include/validate?\
name=${name}&forIncoming=${forIncoming}&format=${format}&withCustomValidations=${withCustomValidations}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?
  #if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  echo "${response}"
  return ${rc}
}


function recognizeFromNodeId {
  if [[ $# -lt 1 ]]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-NODE ID"
    echo "### (OPTIONAL) YOU MAY PROVIDE ANY OTHER API OPTIONS WITH <option>=<value> (ex: downLimit=100)"
    return $INSUFFICIENT_ARGS
  fi

  while [[ "$#" > "0" ]]
  do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  downLimit=${downLimit:-100}

  response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/data/ml/recognize" \
  --data-urlencode "path=$1" --data "downLimit=${downLimit}")
  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; if [ ${rc} -ne ${OK} ]; then echo "${response}"; return ${rc}; fi;
  # no errors, extract changeset generated from response
  #changesetId=$(echo "$response" | jq --raw-output '._entities[].id')
  #echo $changesetId
  echo "${response}"
  return $OK
}


function recognizeFromPath {
  if [[ $# -lt 1 ]]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-NODE PATH"
    echo "### (OPTIONAL) YOU MAY PROVIDE ANY OTHER API OPTIONS WITH <option>=<value> (ex: downLimit=100)"
    return $INSUFFICIENT_ARGS
  fi

  while [[ "$#" > "0" ]]
  do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  downLimit=${downLimit:-100}

  # Get NodeID from PATH

  # Call the function to recognize from Id
  $(recognizeFromNodeId $nodeId $#)
  return $?
}


function storeSnapshot {
  if [[ $# -lt 1 ]]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE 1-MDS NAME TO SNAPSHOT"
    echo "### (OPTIONAL) YOU MAY PROVIDE ANY OTHER API OPTIONS IN THE FORMAT <option>=<value> (ex: level=warn)"
    return $INSUFFICIENT_ARGS
  fi
  argMds=$1
  # Get all other optional arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  description=${description:-}
  level=${level:-"error"}

  response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/data/include/snapshot/byname?name=${argMds}" \
    --data-urlencode "tag=${tag}" \
    --data-urlencode "description=${description}" \
    --data "level=${level}")

  response=$(handleErrors $? "${response}")
  # No specific response processing, just return it
  rc=$?; echo "${response}"; return ${rc}
}


function updateConfigData() {
  # Get all arguments
  id=$1
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  attributeKey=${attributeKey:-}
  attributeValue=${attributeValue:-}
  changeset=${changeset:-}
  isSensitive=${isSensitive:-false}
  mdiTypeId=${mdiTypeId:-}

  # Check if insufficient args
  # or attributeKey or attributeValue empty
  if [[ -z "${attributeKey}" ]] && [[ -z "${attributeValue}" ]]; then echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"; echo "### YOU MUST PROVIDE attributeKey=<key> or attributeValue=<value>"; return $INSUFFICIENT_ARGS; fi

  # Check if changeset not provided, then create it
  if [[ -z ${changeset} ]]; then changeset=$(createChangeset "Update key ${attributeKey}"); fi

  # Check if mdiTypeName provided and id empty, will search for Id

  #echo "Creating changeset"
  response=$(curl -skw "%{http_code}" -X POST "${sweagleURL}/api/v1/data/metadata/${id}" -H "Authorization: bearer $aToken" -H "Accept: application/vnd.siren+json" \
    --data-urlencode "attributeKey=${attributeKey}" \
    --data-urlencode "attributeValue=${attributeValue}" \
    --data "changeset=${changeset}&isSensitive=${isSensitive}&mdiTypeId=${mdiTypeId}")

  # Handle errors
  response=$(handleErrors $? "${response}")
  rc=$?; echo "${response}"; return ${rc}
}


function uploadFile {
  # Get all arguments
  while [[ "$#" > "0" ]]; do
    case $1 in
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  allowDelete=${allowDelete:-false}
  autoApprove=${autoApprove:-false}
  autoRecognize=${autoRecognize:-false}
  changeset=${changeset:-}
  description=${description:-}
  file=${file:-}
  encoding=${encoding:-utf-8}
  identifierWords=${identifierWords:-}
  nodePath=${nodePath:-}
  onlyParent=${onlyParent:-true}
  runRecognition=${runRecognition:-false}
  storeSnapshotResults=${storeSnapshotResults:-false}
  tag=${tag:-}
  validationLevel=${validationLevel:-"warn"}

  if [[ -z ${file} ]]; then echo "### ERROR: FILE COULD NOT BE EMPTY, PUT file=<value>"; return $INSUFFICIENT_ARGS; fi
  if [[ -z ${nodePath} ]]; then echo "### ERROR: NODE PATH COULD NOT BE EMPTY, PUT nodePath=<value>"; return $INSUFFICIENT_ARGS; fi
  extension="${file##*.}"
  format=${format:-$extension}
  # Put format in lowercase and check it to set content type
  case ${format,,} in
    ini)
      contentType="text/plain" ;;
    json)
      contentType="application/json" ;;
    xml)
      contentType="application/xml" ;;
    yaml)
      contentType="application/x-yaml" ;;
    yml)
      contentType="application/x-yaml" ;;
    *)
      # if not identified, consider file as property file
      contentType="text/x-java-properties" ;;
  esac
  description=$(urlencode $description)

  response=$(curl -skw "%{http_code}" "${sweagleURL}/api/v1/data/bulk-operations/dataLoader/upload?nodePath=${nodePath}&allowDelete=${allowDelete}&autoApprove=${autoApprove}&changeset=${changeset}&description=${description}&encoding=${encoding}&format=${format}&identifierWords=${identifierWords}&onlyParent=${onlyParent}&runRecognition=${runRecognition}&storeSnapshotResults=${storeSnapshotResults}&tag=${tag}&validationLevel=${validationLevel}" \
    --request POST -H "Authorization: bearer $aToken" -H "Content-Type: $contentType" --data-binary "@$file")

  response=$(handleErrors $? "${response}")
  # No specific response processing, just return it
  rc=$?; echo "${response}"; return ${rc}
}


function validateConfig {

  while [[ "$#" > "0" ]]
  do
    case $1 in
      # For arg object, we just remove first 4 chars 'arg=' to avoid destroying object format by eval
      (arg=*) arg="${1:4}";;
      # Other args are managed normally
      (*=*) eval $1;;
    esac
    shift
  done
  # Check if args null to replace by default values
  arg=${arg:-}
  autoswitch=${autoswitch:-true}
  cds=${cds:-}
  forIncoming=${forIncoming:-true}
  format=${format:-json}
  mdsArgs=${mdsArgs:-}
  mdsTags=${mdsTags:-}
  withCustomValidations=${withCustomValidations:-false}

  if [[ -z ${cds} ]]; then
    echo "### ERROR: NOT ENOUGH ARGUMENTS SUPPLIED"
    echo "### YOU SHOULD PROVIDE AT LEAST cds=<YOUR CDS>"
    echo "### (OPTIONAL) YOU MAY PROVIDE ANY OTHER API OPTIONS IN THE FORMAT <option>=<value> (ex: parser=myParser, forIncoming=false)"
    return $INSUFFICIENT_ARGS
  fi

  if [[ -z ${parser} ]]; then
    # No parser provided, check the standard validator status
    response=$(curl -skw "%{http_code}" -X GET -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/data/include/validate?name=${cds}&format=${format}&forIncoming=${forIncoming}&withCustomValidations=${withCustomValidations}")
  else
    response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/tenant/metadata-parser/validate" \
      --data "mds=${cds}" --data "parser=${parser}" --data-urlencode "arg=${arg}" --data "mdsArgs=${mdsArgs}" --data "mdsTags=${mdsTags}" --data "forIncoming=${forIncoming}")
  fi
  # Handle errors
  response=$(handleErrors $? "${response}")
  # If autoswitch to true and error is "NotFound" (no incoming snapshot), then check last snapshot instead
  rc=$?; if [ ${forIncoming} = true ] && [ ${rc} -ne 0 ] && [ ${autoswitch} = true ]; then
    ec=$(echo "${response}" | jsonValue error)
    if [ "${ec}" = "NotFoundException" ]; then
      if [[ -z ${parser} ]]; then
        # No parser provided, check the standard validator status
        response=$(curl -skw "%{http_code}" -X GET -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/data/include/validate?name=${cds}&format=${format}&forIncoming=false&withCustomValidations=${withCustomValidations}")
      else
        response=$(curl -skw "%{http_code}" -X POST -H "Authorization: bearer $aToken" "${sweagleURL}/api/v1/tenant/metadata-parser/validate" \
          --data "mds=${cds}" --data "parser=${parser}"  --data "arg=${arg}" --data "mdsArgs=${mdsArgs}" --data "mdsTags=${mdsTags}" --data "forIncoming=false")
      fi
      # Handle errors
      response=$(handleErrors $? "${response}")
    fi
  fi
  echo $response | jq .
  rc=$(echo "$response" | jsonValue "result")
  if [[ $response = "{\"error\":"* ]]; then
      echo "********** ERROR: Unable to validate configuration: ${cds} with validator: ${parser}"
      exit 1
  elif [ "$rc" = false ]; then
      echo "********** ERROR: BROKEN configuration data detected for validator: " ${parser}
      exit 1
  fi
}
