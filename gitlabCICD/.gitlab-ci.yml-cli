#image: node:latest
image: "docker.sweagle.com:8444/sweagle-docker/sweagle-cli:1.0.0"

stages:
  - check connection
  - collect inputs
  - validate and store config
  - deploy

# WARNING: check if your tenant is case sensitive (default) to input vars below
variables:
  #-----------------------------------------------------
  #----     APPLICATION PARAMS
  #-----------------------------------------------------
  APPLI: "samples-test"
  # ex: CONFIG_DIR: "./conf"
  CONFIG_FILE: "./conf/inputs.properties"
  ENV: "prod"
  VERSION: "1.0.5"

  SWEAGLE_PATH: "infra2020"
  # ex: SWEAGLE_PATH: "dimension,node1,node2"
  SWEAGLE_CDS: $APPLI-$ENV
  # ex: SWEAGLE_CDS: "dimension" or SWEAGLE_MDS:$APP_NAME-$ENV_NAME (if they have been defined before)
  #SWEAGLE_VALIDATORS: "noDevValues noEmptyValues passwordChecker"
  SWEAGLE_EXPORTER: "all"
  # ex: SWEAGLE_EXPORTER: "all" or SWEAGLE_EXPORTER: "returnDataForNodeName"
  SWEAGLE_EXPORTER_ARGS: "dev"
  # ex: SWEAGLE_EXPORTER_ARGS: "" or SWEAGLE_EXPORTER_ARGS: "node1"
  SWEAGLE_EXPORTER_FORMAT: "PROPS"
  # ex: SWEAGLE_EXPORTER_FORMAT: "YAML"
  SWEAGLE_EXPORTER_OUTPUT: "./release/release.properties"
  # ex: SWEAGLE_EXPORTER_OUTPUT: ""
  GITLAB_TARGET_DIR: "/release"
  # ex: GITLAB_TARGET_DIR: "/release"


checkCURL:
  stage: check connection
  only:
  - master
  script:
    #-----------------------------------------------------
    #----     Check network connection to SWEAGLE
    #-----------------------------------------------------
    - curl "$ENV/info"
  when: always
  # possible values always, on_success, on_failure, manual

checkCLI:
  stage: check connection
  only:
  - master
  script:
    #-----------------------------------------------------
    #----     Check CLI connection to SWEAGLE
    #-----------------------------------------------------
    # ENV and TOKEN variables are set in Gtilab CI/CD settings
    # like this TOKEN is a masked variable
    - sweagle options --newenv "$ENV" --newtoken "$TOKEN"
    - sweagle info
  when: always
  # possible values always, on_success, on_failure, manual

# At the end of build, upload "builded" configuration to SWEAGLE
getUserInputs:
  stage: collect inputs
  only:
  - master
  before_script:
    - sweagle options --newenv "$ENV" --newtoken "$TOKEN"
  script:
    - echo "######################"
    - echo "### Get user inputs"
  when: always
  # possible values always, on_success, on_failure, manual

validateConfig:
  stage: validate and store config
  only:
  - master
  variables:
    # specific variables for this step
  before_script:
    - sweagle options --newenv "$ENV" --newtoken $TOKEN
  script:
    - echo "######################"
    - echo "### Check configuration from SWEAGLE"

    - echo "### Store your config snapshot in order to be able to retrieve it"
    - sweagle storeSnapshots --configdatasetName $SWEAGLE_CDS --snapshotTag $VERSION --level error
  when: always
  # possible values always, on_success, on_failure, manual

deliverNewVersion:
  stage: deploy
  only:
  - master
  variables:
    # specific variables for this step
  before_script:
    - sweagle options --newenv "$ENV" --newtoken $TOKEN
    - echo "### Export configuration from SWEAGLE"
    - sweagle.sh export $SWEAGLE_CDS --exporter $SWEAGLE_EXPORTER --format $SWEAGLE_EXPORTER_FORMAT > $SWEAGLE_EXPORTER_OUTPUT
  script:
    - echo "######################"
    - echo "### Deploy new version"
  artifacts:
    paths:
    # Store deployed config in Artifacts
    - $SWEAGLE_EXPORTER_OUTPUT
  when: always
  # possible values always, on_success, on_failure, manual
