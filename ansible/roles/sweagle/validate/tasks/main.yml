---

- name: ALL - Init error_found at false
  set_fact:
    error_found: false

################################################################
#################           API MODE           #################
################################################################

- name: API - Read SWEAGLE url and token from db.json
  set_fact:
    sweagle_url: "{{ lookup('file','{{ db_file }}') | from_json | json_query('environment.url') }}"
    sweagle_token: "{{ lookup('file','{{ db_file }}') | from_json | json_query('user.token') }}"
    ignore_ssl: "{{ lookup('file','{{ db_file }}') | from_json | json_query('settings.ignoreSSL') }}"
  when: not use_cli and use_db_file

- name: API - Validate CDS
  uri:
    url: "{{ sweagle_url }}/api/v1/tenant/metadata-parser/validate"
    body:
      arg: "{{ item.arg | default(global.arg) | default('') }}"
      forIncoming: "{{ item.forIncoming | default(global.forIncoming) | default('false') }}"
      mds: "{{ item.cds | default(global.cds) }}"
      mdsArgs: "{{ item.mdsArgs | default(global.mdsArgs) | default('') }}"
      mdsTags: "{{ item.mdsTags | default(global.mdsTags) | default('') }}"
      parser: "{{ item.validator | default(global.validator) }}"
    body_format: form-urlencoded
    method: POST
    return_content: true
    validate_certs: "{{ not ignore_ssl }}"
    headers:
      Accept: "application/vnd.siren+json"
      Authorization: "Bearer {{ sweagle_token }}"
  register: result
  when: not use_cli
  loop: "{{ validate_cds_list }}"
  loop_control:
    label: "#######################################################\n
    For CDS: '{{ item.cds | default(global.cds) }}' and validator '{{ item.validator | default(global.validator) }}',
    result is:\n{{ result.json | default('{}') | to_nice_json }}"

- name: API - Set error_found
  set_fact:
    # If one validators fails, its json failed will be equals to true, and it will be the max value in all failed results
    error_found: "{{ result | json_query('results[*].json.failed') | max }}"
  when: not use_cli


################################################################
#################           CLI MODE           #################
################################################################

- name: CLI - Install CLI
  include_role:
    name: installCLI
  when: use_cli and install_cli

- name: CLI - Validate CDS
  shell: "{{ cli_installation_folder }}/sweagle validate \"{{ item.cds | default(global.cds) }}\" \
    {{ '--forIncoming' if item.forIncoming | default(global.forIncoming)  | default(false) }} \
    {{ '--pretty' if item.pretty | default(global.pretty) | default(false) }} \
    --validator \"{{ item.validator | default(global.validator) }}\" }}"
  register: result
  when: use_cli
  loop: "{{ validate_cds_list }}"
  loop_control:
    label: "#######################################################\n
    For CDS: '{{ item.cds | default(global.cds) }}' and validator '{{ item.validator | default(global.validator) }}',
    result is:\n
    {{ 'skipped' if result.stdout is undefined else result.stderr if result.stdout=='' else result.stdout }}"

- name: CLI - Set error_found
  set_fact:
    # If one validators fails, its stdout will container a 'failed: true' string that can be detected
    error_found:  "{{ result | json_query('results[*].stdout') | join(',') | regex_search('failed: true') | ternary(true,false) }}"
  when: use_cli


- name: ALL - Fail if error_found is true
  fail:
    msg: "Some validators have errors, failing playbook, check errors above !"
  when: error_found
